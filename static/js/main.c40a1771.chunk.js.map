{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/cards.jsx","components/Githublogo.jsx","App.js","serviceWorker.js","index.js"],"names":["Heading","id","href","className","Footer","target","rel","StateCard","props","handleTodayClick","setState","prevState","switchTotal","state","isLoading","currentlyActive","totalActive","totalDeath","totalRecovered","updatedDate","todayActive","todayDeath","todayRecovered","fetch","then","response","json","currentlyactive","totalactive","totaldeath","totalrecovered","console","log","date","active","death","recovered","onClick","this","Component","githubLogo","aria-label","width","height","viewBox","aria-hidden","d","fill","App","Fragment","Githublogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c40a1771.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles/header.css\";\r\nconst Heading = () => {\r\n  return (\r\n    <header id=\"section0\">\r\n      <h1>KERALA COVID19</h1>\r\n      <a href=\"#section2\" className=\"arrow\">\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n      </a>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Heading;\r\n","import React from \"react\";\r\nimport \"./styles/footer.css\";\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"year\">Â© 2020</span>\r\n      <a\r\n        className=\"dataSource\"\r\n        href=\"https://dhs.kerala.gov.in/category/daily-bulletin/\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Data Source\r\n      </a>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles/cards.css\";\r\nimport Footer from \"./Footer\";\r\n\r\nclass StateCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      switchTotal: true,\r\n      isLoading: true,\r\n      currentlyActive: \"\",\r\n      totalActive: \"\",\r\n      totalDeath: \"\",\r\n      totalRecovered: \"\",\r\n      updatedDate: \"\",\r\n      todayActive: \"\",\r\n      todayDeath: \"\",\r\n      todayRecovered: \"\",\r\n    };\r\n  }\r\n\r\n  handleTodayClick = () => {\r\n    this.setState((prevState) => ({\r\n      switchTotal: !prevState.switchTotal,\r\n    }));\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://antony0101.pythonanywhere.com/status/\")\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        this.setState({\r\n          isLoading: false,\r\n          currentlyActive: response.currentlyactive,\r\n          totalActive: response.totalactive,\r\n          totalDeath: response.totaldeath,\r\n          totalRecovered: response.totalrecovered,\r\n        });\r\n        console.log(response);\r\n      });\r\n    fetch(\"https://antony0101.pythonanywhere.com/today/\")\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        console.log(response);\r\n        this.setState({\r\n          updatedDate: response.date,\r\n          todayActive: response.active,\r\n          todayDeath: response.death,\r\n          todayRecovered: response.recovered,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"stateCard\">\r\n        <div className=\"cardheader\">\r\n          <h1>Complete Report</h1>\r\n        </div>\r\n        <div id=\"container\">\r\n          <div id=\"main\" onClick={this.handleTodayClick}>\r\n            <div\r\n              className={\r\n                this.state.switchTotal ? \"total coloron\" : \"total coloroff\"\r\n              }\r\n            >\r\n              Total\r\n            </div>\r\n            <div\r\n              className={\r\n                this.state.switchTotal ? \"today coloroff\" : \"today coloron\"\r\n              }\r\n            >\r\n              Today\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"cards\">\r\n          <div className=\"updatedTime\">\r\n            <p>Last Updated: {this.state.updatedDate}</p>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"column \">\r\n              <div className=\"card confirmed\">\r\n                <h3>\r\n                  {this.state.isLoading\r\n                    ? \"Loading\"\r\n                    : this.state.switchTotal\r\n                    ? this.state.totalActive\r\n                    : this.state.todayActive}\r\n                </h3>\r\n                <p>Confirmed</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"column \">\r\n              <div className=\"card recovered\">\r\n                <h3>\r\n                  {this.state.isLoading\r\n                    ? \"Loading\"\r\n                    : this.state.switchTotal\r\n                    ? this.state.totalRecovered\r\n                    : this.state.todayRecovered}\r\n                </h3>\r\n                <p>Recovered</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"column\">\r\n              <div className=\"card active\">\r\n                <h3>\r\n                  {this.state.isLoading\r\n                    ? \"Loading\"\r\n                    : this.state.switchTotal\r\n                    ? this.state.currentlyActive\r\n                    : this.state.currentlyActive}\r\n                </h3>\r\n                <p>Active</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"column \">\r\n              <div className=\"card death\">\r\n                <h3>\r\n                  {this.state.isLoading\r\n                    ? \"Loading\"\r\n                    : this.state.switchTotal\r\n                    ? this.state.totalDeath\r\n                    : this.state.todayDeath}\r\n                </h3>\r\n                <p>Deaths</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StateCard;\r\n","import React from \"react\";\r\nimport \"./styles/githublogo.css\";\r\nconst githubLogo = () => {\r\n  return (\r\n    <div>\r\n      <a\r\n        href=\"https://github.com/The-Jin-799/Kerala-COVID19\"\r\n        className=\"github-corner\"\r\n        aria-label=\"View source on GitHub\"\r\n      >\r\n        <svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" aria-hidden=\"true\">\r\n          <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\r\n          <path\r\n            d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\r\n            fill=\"currentColor\"\r\n            className=\"octo-arm\"\r\n          ></path>\r\n          <path\r\n            d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\r\n            fill=\"currentColor\"\r\n            className=\"octo-body\"\r\n          ></path>\r\n        </svg>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default githubLogo;\r\n","import React from \"react\";\r\nimport Heading from \"./components/Header\";\r\nimport StateCard from \"./components/cards\";\r\nimport Githublogo from \"./components/Githublogo\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Heading />\r\n      <Githublogo />\r\n      <div id=\"section2\">\r\n        <StateCard />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}